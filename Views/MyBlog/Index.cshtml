@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using Quill.Delta;
@model Blog.Models.MainVM

<div class="myBlogSpaceMain container bg-light">

    @*<div class="createPostContent"></div>*@
    @*asp-action="CreateQuiilPost"*@

@*    <div class="container">
        <form class="QuillCreatePostForm" method="post" asp-action="CreateQuiilPost">

            <div class="row">
                <div class="col-xs-8">
                    <div class="form-group mb-2">
                        <label for="title">Title</label>
                        <input class="form-control" name="title" type="text" value="test title">
                    </div>
                    <div class="form-group mb-2">
                        <label for="Category">Category</label>
                        <input class="form-control" name="Category" type="text" value="test category">
                    </div>
                </div>
            </div>

            <div class="row form-group removePaddingEditorAndBtn">
                <label for="postContent">Post</label>
                <input name="postContent" type="hidden">
                <div id="editor-container"></div>
            </div>

            <div class="row removePaddingEditorAndBtn">
                <button class="btn btn-primary" type="submit">Submit Post</button>
            </div>

        </form>
    </div>*@

    @*------------------------------------------------------------*@

@*    @if (Model.PostsList != null)
    {
        @foreach (var post in Model.PostsList)
        {
            <h2>@post.Title</h2>
            @if (!string.IsNullOrEmpty(post.Content))
            {
                <div>@Html.Raw(post.Content)</div>

            }
        }
    }*@


    <form method="POST" class="sendPostForm" asp-action="GetPost" enctype="multipart/form-data">

        <div asp-validation-summary="ModelOnly" class="text-danger"> </div>

        <!-- title input -->

        <div class="form-outline mb-4">
            <label class="form-label" asp-for="TextEditor.Title"></label>
            <div>
                <input asp-for="TextEditor.Title" name="Title" class="form-control" />
                <span asp-validation-for="TextEditor.Title" class="text-danger"></span>
            </div>
        </div>

        <!-- body input -->

        <div class="form-outline mb-4">
            <label class="form-label" asp-for="TextEditor.RichContent"></label>
            <div>
                <textarea id="richTextEditor" name="richContent" asp-for="TextEditor.RichContent" class="form-control"></textarea>
                <span asp-validation-for="TextEditor.RichContent" class="text-danger"></span>
            </div>
        </div>


        <input type="Submit" class="btn btn-primary" value="Create" />
    </form>

    @if(Model.PostsList != null){

        @foreach (var post in Model.PostsList)
        {
            <div class="post">
                <h3>@post.Title</h3>
                <div>
                    @Html.Raw(post.Content)
                </div>
            </div>
        }
    }



</div>

@section Scripts{

    <script>


        let editor = new FroalaEditor('#richTextEditor');
        var form = document.querySelector('.sendPostForm');

        form.onsubmit = async function (e) {
            e.preventDefault();

            const postTitle = document.querySelector('input[name=Title]').value;
            const richTextContent = document.querySelector('textarea[name=richContent]').value;

            const convertToBase64 = async (url) => {
                const response = await fetch(url);
                const blob = await response.blob();
                return new Promise((resolve, reject) => {
                    const reader = new FileReader();
                    reader.onloadend = () => resolve(reader.result);
                    reader.onerror = reject;
                    reader.readAsDataURL(blob);
                });
            };

            const promises = [];
            const updatedContent = richTextContent.replace(/<img([^>]+)>/g, (match, p1) => {
                const srcMatch = p1.match(/src\s*=\s*(['"])(.*?)\1/);
                if (srcMatch) {
                    const src = srcMatch[2];
                    if (!src.startsWith('http') && !src.startsWith('https')) {
                        const base64Promise = convertToBase64(src);
                        promises.push(base64Promise);
                        return match;
                    }
                }
                return match;
            });

            const base64Array = await Promise.all(promises);
            let base64Index = 0;
            const updatedContentWithBase64 = updatedContent.replace(/<img([^>]+)>/g, (match, p1) => {
                const srcMatch = p1.match(/src\s*=\s*(['"])(.*?)\1/);
                if (srcMatch) {
                    const src = srcMatch[2];
                    if (!src.startsWith('http') && !src.startsWith('https')) {
                        const base64 = base64Array[base64Index];
                        base64Index++;
                        return match.replace(src, base64);
                    }
                }
                return match;
            });

            var form = $(this);
            var url = form.attr('action');

            const formData = new FormData();
            formData.append('RichContent', updatedContentWithBase64);
            formData.append('Title', postTitle);

            $.ajax({
                url: url,
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function (data) {
                    // Handle the success response
                    alert("Works");
                },
                error: function (xhr, status, error) {
                    var errorMessage = xhr.responseText || 'An error occurred.';
                    alert('Error: ' + errorMessage);
                    console.log(errorMessage);
                }
            });

            return false;
        };




    </script>
}